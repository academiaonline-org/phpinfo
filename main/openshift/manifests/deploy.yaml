apiVersion: apps/v1
kind: Deployment
metadata:
  name: phpinfo
spec:
  # This manifest ensures that replicas are distributed across two availability zones and placed on separate worker nodes.
  # Deploying 4 replicas will ensure they are spread across 4 different nodes in two availability zones.
  # Deploying 2 replicas will ensure they are spread across 2 different nodes in two availability zones.
  replicas: 4
  selector:
    matchLabels:
      app: phpinfo
  template:
    metadata:
      labels:
        app: phpinfo
    spec:
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app: phpinfo
        # maxSkew is the parameter used to evenly distribute workloads across specified topology keys.  
        # When maxSkew is set to 1, the workload is balanced such that the difference between the highest and lowest workload across topological regions does not exceed 1 unit.
        maxSkew: 1
        # In this configuration, the topology key represents an availability zone, such as a distinct data center.
        topologyKey: topology.kubernetes.io/zone
        # If the scheduler cannot find an available worker node in the specified availability zone, the replica will not be scheduled.  
        # This may block the deployment if no nodes are available, but it is essential to maintain high availability and resilience.  
        whenUnsatisfiable: DoNotSchedule
      - labelSelector:
          matchLabels:
            app: phpinfo
        # maxSkew is the parameter used to evenly distribute workloads across specified topology keys.  
        # When maxSkew is set to 1, the workload is balanced such that the difference between the highest and lowest workload across topological regions does not exceed 1 unit.
        maxSkew: 1
        # In this configuration, the topology key represents a hostname, indicating a specific worker node.
        topologyKey: kubernetes.io/hostname
        # If the scheduler cannot find an available worker node, the replica will not be scheduled.
        # This behavior may block the deployment if no nodes are available, but it ensures high availability and resilience.
        whenUnsatisfiable: DoNotSchedule
      containers:
      - command:
        - php
        - -f
        - index.php
        - -S
        - 0.0.0.0:9000
        image: php
        name: phpinfo
        ports:
        - containerPort: 9000
        # It is highly recommended to configure resource limits to prevent any container from consuming excessive memory or CPU on the host node.
        resources:
          # Limits are set higher than requests, effectively overcommitting resources.
          # This approach carries some risk because if all containers simultaneously utilize resources up to their limits, the node could exceed its capacity, potentially triggering the OOM killer or causing CPU throttling.
          limits:
            cpu: 100m
            memory: 100M        
          # Requests define the minimum CPU and memory resources required to schedule the replica.
          # A replica will not be scheduled if sufficient resources are not available on the node to meet the requests.
          # However, these resources are not reserved for the replica. The scheduler only ensures they are available at the time of scheduling.
          requests:
            cpu: 10m
            memory: 10M
        securityContext:
          # This setting makes the container's filesystem read-only.
          # It is considered a best practice for enhancing security.
          # If your application requires writing to the container's filesystem, you must mount a writable temporary filesystem for that purpose.
          readOnlyRootFilesystem: true
        volumeMounts:
        - # This volume mount, which contains the application data, is set to read-only mode as write access is not required.
          mountPath: /data
          name: phpinfo
          readOnly: true
        - # This volume mount is writable to provide write access to a temporary filesystem.
          mountPath: /tmp
          name: tmp
          readOnly: false
        # Specifies the working directory to prevent the main application from running in the root directory.
        workingDir: /data
      initContainers:
      - # The initContainer is used to prepare the application data by utilizing a writable mount of the data volume, which will later be accessed as read-only by the main container.
        args:
        - echo '<?php phpinfo();?>' >index.php
        command:
        - sh
        - -c
        image: busybox
        name: echo
        volumeMounts:
        - name: phpinfo
          mountPath: /data
          # Specifies writable mode for this volume, while the same volume is mounted in read-only mode by the main container.
          readOnly: false
        workingDir: /data
      volumes:
      - # emptyDir is a type of volume that uses the worker node's local filesystem, creating a subdirectory in the same directory structure as the pod's storage location.
        emptyDir:
          # To prevent disk exhaustion, it is recommended to set a limit on the maximum size the pod can consume from the local filesystem.
          sizeLimit: 1M
        name: phpinfo
      - # emptyDir is a type of volume that creates a temporary directory for the pod, either on the node's local filesystem or in memory.
        emptyDir:
          # Setting "medium: Memory" uses a tmpfs (RAM-backed filesystem) for the volume instead of the node's local disk.
          # This improves performance for I/O-intensive workloads and enhances security, as data resides in memory and is cleared when the pod terminates.
          medium: Memory
          # Setting a size limit is critical to prevent memory exhaustion. This limit specifies the maximum memory the pod can use for this volume.
          # Note that the memory used by the volume counts toward the pod's total memory usage, which includes the container's memory requests and limits.
          sizeLimit: 1M
        name: tmp
